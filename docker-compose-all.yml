version: '3.6'

services:

  pg:
    image: postgres:$POSTGRES_VERSION
    environment:
      - 'POSTGRES_DB=$POSTGRES_DB'
      - 'POSTGRES_USER=$POSTGRES_USER'
      - 'POSTGRES_PASSWORD=$POSTGRES_PASSWORD'
    volumes:
      - 'pg-data-volume:/var/lib/postgresql/data'
      - './docker/pg/create-users.sql:/docker-entrypoint-initdb.d/create-users.sql'
    command: -c log_min_messages=FATAL


  rabbitmq:
    image: rabbitmq:$RABBITMQ_VERSION
    hostname: rabbitmq
    volumes:
      - './docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf'
      - './docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins'
      - 'rabbitmq-data-volume:/var/lib/rabbitmq/mnesia/rabbit@rabbitmq'
    environment:
      - 'RABBITMQ_LOGS=-'
    ports:
      - $RABBITMQ_MANAGEMENT_LOCAL_PORT:15672


  # The purpose of this container is to serve as HTTP cache for the
  # `account-server` container. In complex deployments, it is possible
  # to run several `account-server` instances, each instance being
  # responsible for a different range of creditors/debtors, and each
  # instance making HTTP requests to other `account-server` instances
  # (including itself). A properly configured HTTP cache ensures that
  # the system scales well. (See the `FETCH_API_URL` configuration
  # variable.)
  accounts-cache:
    image: nginx:1.19.4
    volumes:
      - 'nginx-cache-volume:/var/lib/nginx/data'
      - './docker/nginx/nginx.conf:/etc/nginx/nginx.conf'
      - './docker/nginx/templates:/etc/nginx/templates'
    environment:
      - 'PORT=80'
      - 'ACCOUNTS_SERVER_URL=http://accounts-server:8080'
      - 'CACHE_KEYS_ZONE=10m'
      - 'CACHE_MAX_SIZE=1g'
      - 'NGINX_ENTRYPOINT_QUIET_LOGS=1'


  accounts-server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - 'WEBSERVER_PROCESSES=1'
      - 'WEBSERVER_THREADS=3'
      - 'WEBSERVER_PORT=8080'
      - 'FETCH_API_URL=http://accounts-cache:80'
      - 'POSTGRES_URL=postgresql://swpt_accounts:swpt_accounts@pg:5432/${POSTGRES_DB}'
      - 'PROTOCOL_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'PROTOCOL_BROKER_QUEUE=swpt_accounts'
      - 'PROTOCOL_BROKER_PROCESSES=1'
      - 'PROTOCOL_BROKER_THREADS=3'
      - 'PROTOCOL_BROKER_PREFETCH_COUNT=10'
      - 'CHORES_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'CHORES_BROKER_QUEUE=swpt_accounts_chores'
      - 'CHORES_BROKER_PROCESSES=1'
      - 'CHORES_BROKER_THREADS=3'
      - 'CHORES_BROKER_PREFETCH_COUNT=10'
      - 'APP_LOG_LEVEL=warning'
      - 'APP_LOG_FORMAT=json'
      - 'SUBSTITUTE_LOCALHOST_IN_VARS=PROTOCOL_BROKER_URL CHORES_BROKER_URL'


  # The purpose of this container is to create the database schema,
  # and all the necessary RabbitMQ objects (queues, exchanges,
  # etc.). It has to be run only once, but running it multiple times
  # should not do any harm. Set `SETUP_RABBITMQ_BINDINGS` to anything
  # other than "yes", if you do not want RabbitMQ exchanges and
  # bindings to be (re)configured.
  accounts-server-config:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - 'POSTGRES_URL=postgresql://swpt_accounts:swpt_accounts@pg:5432/${POSTGRES_DB}'
      - 'PROTOCOL_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'PROTOCOL_BROKER_QUEUE=swpt_accounts'
      - 'CHORES_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'CHORES_BROKER_QUEUE=swpt_accounts_chores'
      - 'APP_LOG_LEVEL=warning'
      - 'APP_LOG_FORMAT=json'
      - 'SETUP_RABBITMQ_BINDINGS=yes'
      - 'SUBSTITUTE_LOCALHOST_IN_VARS=PROTOCOL_BROKER_URL CHORES_BROKER_URL'
    command: configure


  accounts-stomp-server:
    image: ghcr.io/swaptacular/swpt_stomp:$SWPT_STOMP_VERSION
    environment:
      - 'PROTOCOL_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'SWPT_SERVER_PORT=1234'
      - 'SWPT_SERVER_CERT=/etc/swpt/server.crt'
      - 'SWPT_SERVER_KEY=/secrets/swpt-server.key'
      - 'SWPT_NODEDATA_URL=file:///var/lib/swpt-nodedata'
      - 'APP_LOG_LEVEL=info'
      - 'APP_LOG_FORMAT=json'
      - 'SUBSTITUTE_LOCALHOST_IN_VARS=PROTOCOL_BROKER_URL'
    volumes:
      - './docker/nodedata/server.crt:/etc/swpt/server.crt'
      - './docker/nodedata/server.key:/secrets/swpt-server.key'
      - './docker/nodedata:/var/lib/swpt-nodedata'
    ports:
      - $SWPT_SERVER_LOCAL_PORT:1234
    command: swpt-server
    restart: always


  # The purpose of this container is to create and configure the RabbitMQ
  # queue, from which the "accounts-peer-ca7d3c6f7fc25937c0da7da397502259"
  # container will consume messages (to send them to the given peer). It has
  # to be run only once, but running it multiple times should not do any
  # harm.
  accounts-peer-ca7d3c6f7fc25937c0da7da397502259-config:
    image: ghcr.io/swaptacular/swpt_stomp:$SWPT_STOMP_VERSION
    environment:
      - 'PROTOCOL_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'SWPT_SERVER_CERT=/etc/swpt/server.crt'
      - 'SWPT_SERVER_KEY=/secrets/swpt-server.key'
      - 'SWPT_NODEDATA_URL=file:///var/lib/swpt-nodedata'
      - 'APP_LOG_LEVEL=info'
      - 'APP_LOG_FORMAT=json'
      - 'SUBSTITUTE_LOCALHOST_IN_VARS=PROTOCOL_BROKER_URL'
    volumes:
      - './docker/nodedata/server.crt:/etc/swpt/server.crt'
      - './docker/nodedata/server.key:/secrets/swpt-server.key'
      - './docker/nodedata:/var/lib/swpt-nodedata'
    command: configure-queue ca7d3c6f7fc25937c0da7da397502259 aa.ca7d3c6f7fc25937c0da7da397502259
    restart: on-failure


  # The purpose of this container is to open and maintain a permanent client
  # STOMP connection to the "ca7d3c6f7fc25937c0da7da397502259" peer, sending
  # outgoing Swaptacular Messaging Protocol messages to this peer.
  #
  # NOTE: Similar containers must be configured for every added peer!
  accounts-peer-ca7d3c6f7fc25937c0da7da397502259:
    image: ghcr.io/swaptacular/swpt_stomp:$SWPT_STOMP_VERSION
    environment:
      - 'PROTOCOL_BROKER_URL=amqp://guest:guest@rabbitmq:5672'
      - 'SWPT_SERVER_CERT=/etc/swpt/server.crt'
      - 'SWPT_SERVER_KEY=/secrets/swpt-server.key'
      - 'SWPT_NODEDATA_URL=file:///var/lib/swpt-nodedata'
      - 'APP_LOG_LEVEL=info'
      - 'APP_LOG_FORMAT=json'
      - 'SUBSTITUTE_LOCALHOST_IN_VARS=PROTOCOL_BROKER_URL'
    volumes:
      - './docker/nodedata/server.crt:/etc/swpt/server.crt'
      - './docker/nodedata/server.key:/secrets/swpt-server.key'
      - './docker/nodedata:/var/lib/swpt-nodedata'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: swpt-client ca7d3c6f7fc25937c0da7da397502259 aa.ca7d3c6f7fc25937c0da7da397502259
    restart: always


volumes:
  pg-data-volume:
  rabbitmq-data-volume:
  nginx-cache-volume:
